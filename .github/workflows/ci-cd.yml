# ============================================
# AI Job Chommie - Continuous Integration & Deployment Pipeline
# Enterprise-grade automated workflow for production deployment
# ============================================

name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  # ==========================================
  # Quality Assurance & Testing
  # ==========================================
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Frontend Code Quality Check
        working-directory: ./frontend
        run: |
          npm run lint || true
          npm run format:check || true

      - name: Backend Code Quality Check
        working-directory: ./backend
        run: |
          npm run lint || true
          npm run format:check || true

      - name: Frontend Tests
        working-directory: ./frontend
        run: npm test -- --passWithNoTests

      - name: Backend Tests
        working-directory: ./backend
        run: npm test -- --passWithNoTests

      - name: Frontend Build Verification
        working-directory: ./frontend
        run: npm run build

      - name: Backend Build Verification
        working-directory: ./backend
        run: npm run build || echo "No build step configured"

  # ==========================================
  # Security Scanning
  # ==========================================
  security-scan:
    name: Security Vulnerability Assessment
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Dependency Vulnerability Check
        run: |
          cd frontend && npm audit --audit-level=moderate || true
          cd ../backend && npm audit --audit-level=moderate || true

  # ==========================================
  # Docker Image Building
  # ==========================================
  build-images:
    name: Build & Publish Container Images
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [frontend, backend]
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate with Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta-${{ matrix.service }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push ${{ matrix.service }} Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta-${{ matrix.service }}.outputs.tags }}
          labels: ${{ steps.meta-${{ matrix.service }}.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # ==========================================
  # Staging Deployment
  # ==========================================
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.aijobchommie.co.za
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure SSH Connection
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to Staging Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/ai-job-chommie
            git pull origin main
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            docker system prune -f
          EOF

      - name: Health Check
        run: |
          sleep 30
          curl -f https://staging.aijobchommie.co.za/health || exit 1

  # ==========================================
  # Production Deployment
  # ==========================================
  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    environment:
      name: production
      url: https://www.aijobchommie.co.za
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure SSH Connection
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Create Database Backup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            docker exec aijc-postgres pg_dump -U aijc aijobchommie > /backups/pre-deploy-$(date +%Y%m%d-%H%M%S).sql
          EOF

      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/ai-job-chommie
            git pull origin production
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            docker system prune -f
          EOF

      - name: Health Check
        run: |
          sleep 30
          curl -f https://www.aijobchommie.co.za/health || exit 1

      - name: Notify Deployment Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://www.aijobchommie.co.za',
              description: 'Production deployment successful'
            });

      - name: Rollback on Failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/ai-job-chommie
            git reset --hard HEAD~1
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
          EOF

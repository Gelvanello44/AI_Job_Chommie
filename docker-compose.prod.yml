# ============================================
# AI Job Chommie - Production Docker Compose
# Complete production stack with all services
# ============================================

version: '3.9'

services:
  # Reverse proxy with automatic SSL
  caddy:
    image: caddy:2.8-alpine
    container_name: aijc-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - aijc-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: aijc-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    networks:
      - aijc-network

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aijc-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://aijc:${DB_PASSWORD}@postgres:5432/aijobchommie?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - HUGGINGFACE_API_TOKEN=${HUGGINGFACE_API_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aijc-network
    volumes:
      - backend_logs:/app/logs

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: aijc-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aijobchommie
      - POSTGRES_USER=aijc
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - aijc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aijc -d aijobchommie"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: aijc-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - aijc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backup service
  postgres-backup:
    image: postgres:16-alpine
    container_name: aijc-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - postgres
    networks:
      - aijc-network

networks:
  aijc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
